generator kysely {
  provider = "prisma-kysely"
}

generator client {
  provider = "prisma-client-js"
}


generator json {
  provider = "prisma-json-types-generator"
}

generator zod {
  provider = "zod-prisma-types"
  createInputTypes = false
  writeBarrelFiles=true
  useMultipleFiles=true
}

datasource db {
  provider = "postgresql"
  url = env("NEXT_PRIVATE_DATABASE_URL")
}

enum IdentityProvider {
  DOCUMENSO
  GOOGLE
  OIDC
}

enum Role {
  ADMIN 
  USER
}

model User {

  id Int @id @default(autoincrement())
  name String?
  customerId String?
  email String?
  emailVerified DateTime?
  password String?
  source String?
  signature String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  lastSignedIn  DateTime @default(now())
  roles Role[] @default([USER])
  identityProvider IdentityProvider @default(DOCUMENSO)
  avatarImageId String? 
  disabled  Boolean @default(false)
  accounts Account[]
  sessions Session[]
  documents Document[]
}

model Account {
  id String @id  @default(cuid())
  userId Int
  type String
  provider String
  ProviderAccountId String 
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  created_at Int?
  ext_expires_in Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?
  user User? @relation(fields:[userId],references: [id],onDelete: Cascade)

  @@unique([provider,ProviderAccountId])
}

model Session {
  id String @id @default(cuid())
  sessionToken String @unique
  userId Int 
  expires DateTime
  user User?  @relation(fields: [userId],references: [id],onDelete: Cascade)
}



enum DocumentVisibility {
  EVERYONE
  MANAGER_AND_ABOVE
  ADMIN
}
enum DocumentStatus {
  DRAFT
  PENDING
  COMPLETED
}

/// @zod.import(["import {ZDocumentAuthOptionsSchema} from '@documenso/lib/types/document-auth';","import {ZDocumentFormValuesSchema} from '@documenso/lib/types/document-form-values'; "])

model Document {
  id Int @id  @default(autoincrement())
  externalId String? /// @zod.string.describe("A custom external ID you can use to identify the document.")
  userId Int /// @zod.number.describe("The Id of the user that created this document.")
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  authOptions Json? /// [DocumentAuthOptions] @zod.custom.use(ZDocumentAuthOptionsSchema)
  formValues Json? /// @zod.custom.use(ZDocumentFormValuesSchema)
  visibility DocumentVisibility @default(EVERYONE)
  title String 
  status   DocumentStatus      @default(DRAFT)
  recipients Reciepient[]
  fields Field []
  shareLinks DocumentShareLink[]
  documentDataId String
  documentData  DocumentData @relation(fields: [documentDataId], references: [id], onDelete: Cascade)
  documentMeta   DocumentMeta?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @default(now()) @updatedAt
  deletedAt      DateTime?
  teamId         Int?
  team           Team?               @relation(fields: [teamId], references: [id])
  templateId Int? 
  template Template? @relation(fields: [templateId],references:[id],onDelete: SetNull)
  source DocumentSource
  auditLogs DocumentAuditLog[]
  @@unique([documentDataId])
    @@index([userId])
  @@index([status])


}