# Generated by Django 5.2 on 2025-08-19 20:50

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(help_text="Reset Password's token sent to user's email", max_length=255, verbose_name='token')),
                ('expires_at', models.DateTimeField(help_text='Specify when access token or session will expire.', verbose_name='expires at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', related_query_name='password_reset_token', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'password reset token',
                'verbose_name_plural': 'password reset tokens',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('timestampeduuidmodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.timestampeduuidmodel')),
                ('type', models.CharField(blank=True, help_text='Specify how user is being authenticated (e.g. credentials, oauth).', max_length=50, validators=[django.core.validators.MinLengthValidator(1)], verbose_name='type')),
                ('provider', models.CharField(blank=True, help_text='Specify what is the authentication provider is used to authenticated the user (e.g. current system, google, OIDC ).', max_length=50, validators=[django.core.validators.MinLengthValidator(3)], verbose_name='provider')),
                ('provider_account_id', models.CharField(blank=True, help_text='Unique identifier provided by authentication provider.', max_length=255, validators=[django.core.validators.MinLengthValidator(1)], verbose_name='provider account id')),
                ('refresh_token', models.TextField(blank=True, help_text='Token to obtain a new  Access Token when old one gets expired.', null=True, verbose_name='refresh token')),
                ('access_token', models.TextField(blank=True, help_text='Token to authenticate user.', null=True, verbose_name='access token')),
                ('expires_at', models.DateTimeField(blank=True, help_text='Specify when access token or session will expire.', null=True, verbose_name='expires at')),
                ('ext_expires_in', models.IntegerField(blank=True, help_text='Duration in seconds indicating how long access token is valid after it expires', null=True, verbose_name='extended expires in')),
                ('token_type', models.CharField(blank=True, help_text='Specify type of token issued by authentication provider (e.g. Bearer, MAC)', max_length=20, null=True, validators=[django.core.validators.MinLengthValidator(3)], verbose_name='token type')),
                ('scope', models.TextField(blank=True, help_text='List of permissions or access scopes granted by Identity provider when token issued.', null=True, verbose_name='scope')),
                ('id_token', models.TextField(blank=True, help_text='JWT Auth token to authenticate user and provide the basic user information.', null=True, verbose_name='id token')),
                ('session_state', models.CharField(blank=True, help_text="Helps app to know if user logged out or if there is any change in user's session", max_length=255, null=True, validators=[django.core.validators.MinLengthValidator(10)], verbose_name='session state')),
                ('user', models.ForeignKey(blank=True, help_text='User this account is related to.', on_delete=django.db.models.deletion.CASCADE, related_name='accounts', related_query_name='account', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('provider', 'provider_account_id'), name='provider_account_id_unique')],
            },
            bases=('core.timestampeduuidmodel',),
        ),
    ]
